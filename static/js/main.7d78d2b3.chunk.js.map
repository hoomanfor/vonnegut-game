{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","components/Book/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","score","topScore","guesses","Book","id","onClick","shuffleBooks","alt","name","src","process","image","height","App","state","books","indexOf","setState","i","length","j","Math","floor","random","this","map","book","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2rCAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCO1BC,MARf,SAAgBH,GACZ,OACI,6BACI,yCAAeA,EAAMI,MAArB,eAAwCJ,EAAMK,SAA9C,cAAmEL,EAAMM,W,MCKtEC,MARf,SAAcP,GACZ,OACI,yBAAKQ,GAAIR,EAAMQ,GAAIC,QAAS,kBAAMT,EAAMU,aAAaV,EAAMQ,KAAKP,UAAU,iBACxE,yBAAKU,IAAKX,EAAMY,KAAMC,IAAKC,iBAAyBd,EAAMe,MAAOC,OAAO,Y,OC8DjEC,E,2MA5DbC,MAAQ,CACNC,QACAf,MAAO,EACPC,SAAU,EACVC,QAAS,I,EAGXI,aAAe,SAACF,GACd,IAAMF,EAAU,EAAKY,MAAMZ,QACvBF,EAAQ,EAAKc,MAAMd,MACnBC,EAAW,EAAKa,MAAMb,UACG,IAAzBC,EAAQc,QAAQZ,GAClB,EAAKa,SAAS,CACZf,QAAQ,GAAD,mBAAM,EAAKY,MAAMZ,SAAjB,CAA0BE,IACjCJ,MAAOA,EAAQ,IAGjB,EAAKiB,SAAS,CACZf,QAAS,GACTF,MAAO,IAGPC,GAAYD,GACd,EAAKiB,SAAS,CACZhB,SAAUA,EAAW,IAIzB,IADA,IAAMc,EAAQ,EAAKD,MAAMC,MAChBG,EAAIH,EAAMI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACH,EAAMK,GAAIL,EAAMG,IAAvCH,EAAMG,GAFkC,KAE9BH,EAAMK,GAFwB,KAI3C,EAAKH,SAAS,CAAEF,W,wEAGR,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEf,MAAOwB,KAAKV,MAAMd,MAClBC,SAAUuB,KAAKV,MAAMb,SACrBC,QAASsB,KAAKV,MAAMZ,UAEpB,kBAAC,EAAD,KACGsB,KAAKV,MAAMC,MAAMU,KAAI,SAACC,EAAMC,GACzB,OAAO,kBAAC,EAAD,CACLC,IAAKF,EAAKtB,GACVA,GAAIsB,EAAKtB,GACTO,MAAOe,EAAKf,MACZH,KAAMkB,EAAKlB,KACXF,aAAc,EAAKA,wB,GApDnBuB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7d78d2b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n    return (\n        <div>\n            <span>score = {props.score} topScore = {props.topScore} guesses = {props.guesses}</span>\n        </div>\n    );\n}\n\nexport default Header","import React from \"react\";\nimport \"./style.css\";\n\nfunction Book(props) {\n  return (\n      <div id={props.id} onClick={() => props.shuffleBooks(props.id)} className=\"img-container\">\n        <img alt={props.name} src={process.env.PUBLIC_URL + props.image} height=\"200px\" />\n      </div>\n  );\n}\n\nexport default Book;\n","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Book from \"./components/Book\";\nimport books from \"./books.json\";\n\nclass App extends Component {\n\n  state = {\n    books,\n    score: 0,\n    topScore: 0,\n    guesses: []\n  };\n\n  shuffleBooks = (id) => {\n    const guesses = this.state.guesses;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    if (guesses.indexOf(id) === -1) {\n      this.setState({\n        guesses: [...this.state.guesses, id],\n        score: score + 1\n      })\n    } else {\n      this.setState({\n        guesses: [],\n        score: 0\n      })\n    }\n    if (topScore <= score) {\n      this.setState({\n        topScore: topScore + 1\n      })\n    }\n    const books = this.state.books; \n    for (let i = books.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [books[i], books[j]] = [books[j], books[i]];\n    }\n    this.setState({ books })\n  }\n\n  render() {\n    return (\n      <div>\n        <Header \n          score={this.state.score}\n          topScore={this.state.topScore}\n          guesses={this.state.guesses}\n        />\n          <Wrapper>\n            {this.state.books.map((book, index) => {\n                return <Book \n                  key={book.id}\n                  id={book.id}\n                  image={book.image}\n                  name={book.name}\n                  shuffleBooks={this.shuffleBooks}\n                />\n              }\n            )}\n          </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}